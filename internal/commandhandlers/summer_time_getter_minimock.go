package commandhandlers

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/GeneralFire/TillSummerBotGo/internal/commandhandlers.SummerTimeGetter -o ./summer_time_getter_minimock.go -n SummerTimeGetterMock

import (
	"sync"
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// SummerTimeGetterMock implements SummerTimeGetter
type SummerTimeGetterMock struct {
	t minimock.Tester

	funcGetSummerTime          func(t1 time.Time) (d1 time.Duration, b1 bool)
	inspectFuncGetSummerTime   func(t1 time.Time)
	afterGetSummerTimeCounter  uint64
	beforeGetSummerTimeCounter uint64
	GetSummerTimeMock          mSummerTimeGetterMockGetSummerTime
}

// NewSummerTimeGetterMock returns a mock for SummerTimeGetter
func NewSummerTimeGetterMock(t minimock.Tester) *SummerTimeGetterMock {
	m := &SummerTimeGetterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetSummerTimeMock = mSummerTimeGetterMockGetSummerTime{mock: m}
	m.GetSummerTimeMock.callArgs = []*SummerTimeGetterMockGetSummerTimeParams{}

	return m
}

type mSummerTimeGetterMockGetSummerTime struct {
	mock               *SummerTimeGetterMock
	defaultExpectation *SummerTimeGetterMockGetSummerTimeExpectation
	expectations       []*SummerTimeGetterMockGetSummerTimeExpectation

	callArgs []*SummerTimeGetterMockGetSummerTimeParams
	mutex    sync.RWMutex
}

// SummerTimeGetterMockGetSummerTimeExpectation specifies expectation struct of the SummerTimeGetter.GetSummerTime
type SummerTimeGetterMockGetSummerTimeExpectation struct {
	mock    *SummerTimeGetterMock
	params  *SummerTimeGetterMockGetSummerTimeParams
	results *SummerTimeGetterMockGetSummerTimeResults
	Counter uint64
}

// SummerTimeGetterMockGetSummerTimeParams contains parameters of the SummerTimeGetter.GetSummerTime
type SummerTimeGetterMockGetSummerTimeParams struct {
	t1 time.Time
}

// SummerTimeGetterMockGetSummerTimeResults contains results of the SummerTimeGetter.GetSummerTime
type SummerTimeGetterMockGetSummerTimeResults struct {
	d1 time.Duration
	b1 bool
}

// Expect sets up expected params for SummerTimeGetter.GetSummerTime
func (mmGetSummerTime *mSummerTimeGetterMockGetSummerTime) Expect(t1 time.Time) *mSummerTimeGetterMockGetSummerTime {
	if mmGetSummerTime.mock.funcGetSummerTime != nil {
		mmGetSummerTime.mock.t.Fatalf("SummerTimeGetterMock.GetSummerTime mock is already set by Set")
	}

	if mmGetSummerTime.defaultExpectation == nil {
		mmGetSummerTime.defaultExpectation = &SummerTimeGetterMockGetSummerTimeExpectation{}
	}

	mmGetSummerTime.defaultExpectation.params = &SummerTimeGetterMockGetSummerTimeParams{t1}
	for _, e := range mmGetSummerTime.expectations {
		if minimock.Equal(e.params, mmGetSummerTime.defaultExpectation.params) {
			mmGetSummerTime.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetSummerTime.defaultExpectation.params)
		}
	}

	return mmGetSummerTime
}

// Inspect accepts an inspector function that has same arguments as the SummerTimeGetter.GetSummerTime
func (mmGetSummerTime *mSummerTimeGetterMockGetSummerTime) Inspect(f func(t1 time.Time)) *mSummerTimeGetterMockGetSummerTime {
	if mmGetSummerTime.mock.inspectFuncGetSummerTime != nil {
		mmGetSummerTime.mock.t.Fatalf("Inspect function is already set for SummerTimeGetterMock.GetSummerTime")
	}

	mmGetSummerTime.mock.inspectFuncGetSummerTime = f

	return mmGetSummerTime
}

// Return sets up results that will be returned by SummerTimeGetter.GetSummerTime
func (mmGetSummerTime *mSummerTimeGetterMockGetSummerTime) Return(d1 time.Duration, b1 bool) *SummerTimeGetterMock {
	if mmGetSummerTime.mock.funcGetSummerTime != nil {
		mmGetSummerTime.mock.t.Fatalf("SummerTimeGetterMock.GetSummerTime mock is already set by Set")
	}

	if mmGetSummerTime.defaultExpectation == nil {
		mmGetSummerTime.defaultExpectation = &SummerTimeGetterMockGetSummerTimeExpectation{mock: mmGetSummerTime.mock}
	}
	mmGetSummerTime.defaultExpectation.results = &SummerTimeGetterMockGetSummerTimeResults{d1, b1}
	return mmGetSummerTime.mock
}

// Set uses given function f to mock the SummerTimeGetter.GetSummerTime method
func (mmGetSummerTime *mSummerTimeGetterMockGetSummerTime) Set(f func(t1 time.Time) (d1 time.Duration, b1 bool)) *SummerTimeGetterMock {
	if mmGetSummerTime.defaultExpectation != nil {
		mmGetSummerTime.mock.t.Fatalf("Default expectation is already set for the SummerTimeGetter.GetSummerTime method")
	}

	if len(mmGetSummerTime.expectations) > 0 {
		mmGetSummerTime.mock.t.Fatalf("Some expectations are already set for the SummerTimeGetter.GetSummerTime method")
	}

	mmGetSummerTime.mock.funcGetSummerTime = f
	return mmGetSummerTime.mock
}

// When sets expectation for the SummerTimeGetter.GetSummerTime which will trigger the result defined by the following
// Then helper
func (mmGetSummerTime *mSummerTimeGetterMockGetSummerTime) When(t1 time.Time) *SummerTimeGetterMockGetSummerTimeExpectation {
	if mmGetSummerTime.mock.funcGetSummerTime != nil {
		mmGetSummerTime.mock.t.Fatalf("SummerTimeGetterMock.GetSummerTime mock is already set by Set")
	}

	expectation := &SummerTimeGetterMockGetSummerTimeExpectation{
		mock:   mmGetSummerTime.mock,
		params: &SummerTimeGetterMockGetSummerTimeParams{t1},
	}
	mmGetSummerTime.expectations = append(mmGetSummerTime.expectations, expectation)
	return expectation
}

// Then sets up SummerTimeGetter.GetSummerTime return parameters for the expectation previously defined by the When method
func (e *SummerTimeGetterMockGetSummerTimeExpectation) Then(d1 time.Duration, b1 bool) *SummerTimeGetterMock {
	e.results = &SummerTimeGetterMockGetSummerTimeResults{d1, b1}
	return e.mock
}

// GetSummerTime implements SummerTimeGetter
func (mmGetSummerTime *SummerTimeGetterMock) GetSummerTime(t1 time.Time) (d1 time.Duration, b1 bool) {
	mm_atomic.AddUint64(&mmGetSummerTime.beforeGetSummerTimeCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSummerTime.afterGetSummerTimeCounter, 1)

	if mmGetSummerTime.inspectFuncGetSummerTime != nil {
		mmGetSummerTime.inspectFuncGetSummerTime(t1)
	}

	mm_params := &SummerTimeGetterMockGetSummerTimeParams{t1}

	// Record call args
	mmGetSummerTime.GetSummerTimeMock.mutex.Lock()
	mmGetSummerTime.GetSummerTimeMock.callArgs = append(mmGetSummerTime.GetSummerTimeMock.callArgs, mm_params)
	mmGetSummerTime.GetSummerTimeMock.mutex.Unlock()

	for _, e := range mmGetSummerTime.GetSummerTimeMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.d1, e.results.b1
		}
	}

	if mmGetSummerTime.GetSummerTimeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSummerTime.GetSummerTimeMock.defaultExpectation.Counter, 1)
		mm_want := mmGetSummerTime.GetSummerTimeMock.defaultExpectation.params
		mm_got := SummerTimeGetterMockGetSummerTimeParams{t1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetSummerTime.t.Errorf("SummerTimeGetterMock.GetSummerTime got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetSummerTime.GetSummerTimeMock.defaultExpectation.results
		if mm_results == nil {
			mmGetSummerTime.t.Fatal("No results are set for the SummerTimeGetterMock.GetSummerTime")
		}
		return (*mm_results).d1, (*mm_results).b1
	}
	if mmGetSummerTime.funcGetSummerTime != nil {
		return mmGetSummerTime.funcGetSummerTime(t1)
	}
	mmGetSummerTime.t.Fatalf("Unexpected call to SummerTimeGetterMock.GetSummerTime. %v", t1)
	return
}

// GetSummerTimeAfterCounter returns a count of finished SummerTimeGetterMock.GetSummerTime invocations
func (mmGetSummerTime *SummerTimeGetterMock) GetSummerTimeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSummerTime.afterGetSummerTimeCounter)
}

// GetSummerTimeBeforeCounter returns a count of SummerTimeGetterMock.GetSummerTime invocations
func (mmGetSummerTime *SummerTimeGetterMock) GetSummerTimeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSummerTime.beforeGetSummerTimeCounter)
}

// Calls returns a list of arguments used in each call to SummerTimeGetterMock.GetSummerTime.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetSummerTime *mSummerTimeGetterMockGetSummerTime) Calls() []*SummerTimeGetterMockGetSummerTimeParams {
	mmGetSummerTime.mutex.RLock()

	argCopy := make([]*SummerTimeGetterMockGetSummerTimeParams, len(mmGetSummerTime.callArgs))
	copy(argCopy, mmGetSummerTime.callArgs)

	mmGetSummerTime.mutex.RUnlock()

	return argCopy
}

// MinimockGetSummerTimeDone returns true if the count of the GetSummerTime invocations corresponds
// the number of defined expectations
func (m *SummerTimeGetterMock) MinimockGetSummerTimeDone() bool {
	for _, e := range m.GetSummerTimeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSummerTimeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSummerTimeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSummerTime != nil && mm_atomic.LoadUint64(&m.afterGetSummerTimeCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetSummerTimeInspect logs each unmet expectation
func (m *SummerTimeGetterMock) MinimockGetSummerTimeInspect() {
	for _, e := range m.GetSummerTimeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SummerTimeGetterMock.GetSummerTime with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSummerTimeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSummerTimeCounter) < 1 {
		if m.GetSummerTimeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SummerTimeGetterMock.GetSummerTime")
		} else {
			m.t.Errorf("Expected call to SummerTimeGetterMock.GetSummerTime with params: %#v", *m.GetSummerTimeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSummerTime != nil && mm_atomic.LoadUint64(&m.afterGetSummerTimeCounter) < 1 {
		m.t.Error("Expected call to SummerTimeGetterMock.GetSummerTime")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SummerTimeGetterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetSummerTimeInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SummerTimeGetterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SummerTimeGetterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetSummerTimeDone()
}
